// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/calebtracey/phish-stats-api/internal/services/mongodb (interfaces: ServiceI)

// Package mongodb is a generated GoMock package.
package mongodb

import (
	context "context"
	reflect "reflect"

	models "github.com/calebtracey/phish-stats-api/internal/models"
	gomock "github.com/golang/mock/gomock"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// MockServiceI is a mock of ServiceI interface.
type MockServiceI struct {
	ctrl     *gomock.Controller
	recorder *MockServiceIMockRecorder
}

// MockServiceIMockRecorder is the mock recorder for MockServiceI.
type MockServiceIMockRecorder struct {
	mock *MockServiceI
}

// NewMockServiceI creates a new mock instance.
func NewMockServiceI(ctrl *gomock.Controller) *MockServiceI {
	mock := &MockServiceI{ctrl: ctrl}
	mock.recorder = &MockServiceIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceI) EXPECT() *MockServiceIMockRecorder {
	return m.recorder
}

// AddNewUser mocks base method.
func (m *MockServiceI) AddNewUser(arg0 context.Context, arg1 models.User) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNewUser", arg0, arg1)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddNewUser indicates an expected call of AddNewUser.
func (mr *MockServiceIMockRecorder) AddNewUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNewUser", reflect.TypeOf((*MockServiceI)(nil).AddNewUser), arg0, arg1)
}

// AllUsersByEmail mocks base method.
func (m *MockServiceI) AllUsersByEmail(arg0 context.Context, arg1 *string) ([]*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllUsersByEmail", arg0, arg1)
	ret0, _ := ret[0].([]*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllUsersByEmail indicates an expected call of AllUsersByEmail.
func (mr *MockServiceIMockRecorder) AllUsersByEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllUsersByEmail", reflect.TypeOf((*MockServiceI)(nil).AllUsersByEmail), arg0, arg1)
}

// AllUsersByPhone mocks base method.
func (m *MockServiceI) AllUsersByPhone(arg0 context.Context, arg1 *string) ([]*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllUsersByPhone", arg0, arg1)
	ret0, _ := ret[0].([]*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllUsersByPhone indicates an expected call of AllUsersByPhone.
func (mr *MockServiceIMockRecorder) AllUsersByPhone(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllUsersByPhone", reflect.TypeOf((*MockServiceI)(nil).AllUsersByPhone), arg0, arg1)
}

// AllUsersByUsername mocks base method.
func (m *MockServiceI) AllUsersByUsername(arg0 context.Context, arg1 *string) ([]*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllUsersByUsername", arg0, arg1)
	ret0, _ := ret[0].([]*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllUsersByUsername indicates an expected call of AllUsersByUsername.
func (mr *MockServiceIMockRecorder) AllUsersByUsername(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllUsersByUsername", reflect.TypeOf((*MockServiceI)(nil).AllUsersByUsername), arg0, arg1)
}

// FindUserByUsername mocks base method.
func (m *MockServiceI) FindUserByUsername(arg0 context.Context, arg1 *models.User) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByUsername", arg0, arg1)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserByUsername indicates an expected call of FindUserByUsername.
func (mr *MockServiceIMockRecorder) FindUserByUsername(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByUsername", reflect.TypeOf((*MockServiceI)(nil).FindUserByUsername), arg0, arg1)
}

// UpdateAllTokens mocks base method.
func (m *MockServiceI) UpdateAllTokens(arg0 context.Context, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAllTokens", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAllTokens indicates an expected call of UpdateAllTokens.
func (mr *MockServiceIMockRecorder) UpdateAllTokens(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAllTokens", reflect.TypeOf((*MockServiceI)(nil).UpdateAllTokens), arg0, arg1, arg2, arg3)
}

// UpdateTokensById mocks base method.
func (m *MockServiceI) UpdateTokensById(arg0 context.Context, arg1 string, arg2 primitive.D) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTokensById", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTokensById indicates an expected call of UpdateTokensById.
func (mr *MockServiceIMockRecorder) UpdateTokensById(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTokensById", reflect.TypeOf((*MockServiceI)(nil).UpdateTokensById), arg0, arg1, arg2)
}
