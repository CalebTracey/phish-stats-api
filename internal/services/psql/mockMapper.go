// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/calebtracey/phish-stats-api/internal/services/psql (interfaces: MapperI)

// Package psql is a generated GoMock package.
package psql

import (
	reflect "reflect"

	models "github.com/calebtracey/phish-stats-api/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockMapperI is a mock of MapperI interface.
type MockMapperI struct {
	ctrl     *gomock.Controller
	recorder *MockMapperIMockRecorder
}

// MockMapperIMockRecorder is the mock recorder for MockMapperI.
type MockMapperIMockRecorder struct {
	mock *MockMapperI
}

// NewMockMapperI creates a new mock instance.
func NewMockMapperI(ctrl *gomock.Controller) *MockMapperI {
	mock := &MockMapperI{ctrl: ctrl}
	mock.recorder = &MockMapperIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMapperI) EXPECT() *MockMapperIMockRecorder {
	return m.recorder
}

// CreatePSQLUserExec mocks base method.
func (m *MockMapperI) CreatePSQLUserExec(arg0 models.User, arg1, arg2, arg3 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePSQLUserExec", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(string)
	return ret0
}

// CreatePSQLUserExec indicates an expected call of CreatePSQLUserExec.
func (mr *MockMapperIMockRecorder) CreatePSQLUserExec(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePSQLUserExec", reflect.TypeOf((*MockMapperI)(nil).CreatePSQLUserExec), arg0, arg1, arg2, arg3)
}
